From 0daaaf5131b2103bc50109366d43c720712fb823 Mon Sep 17 00:00:00 2001
From: Kyle Hale <khale@cs.iit.edu>
Date: Sat, 12 Nov 2016 08:24:08 -0600
Subject: [PATCH 1/2] add setjmp/longjmp support

---
 include/nautilus/setjmp.h | 42 ++++++++++++++++++++++++++++++++++++
 src/asm/Makefile          |  3 ++-
 src/asm/setjmp_low.S      | 39 ++++++++++++++++++++++++++++++++++
 src/nautilus/Makefile     |  3 ++-
 src/nautilus/setjmp.c     | 54 +++++++++++++++++++++++++++++++++++++++++++++++
 5 files changed, 139 insertions(+), 2 deletions(-)
 create mode 100644 include/nautilus/setjmp.h
 create mode 100644 src/asm/setjmp_low.S
 create mode 100644 src/nautilus/setjmp.c

diff --git a/include/nautilus/setjmp.h b/include/nautilus/setjmp.h
new file mode 100644
index 0000000..4ac1535
--- /dev/null
+++ b/include/nautilus/setjmp.h
@@ -0,0 +1,42 @@
+/* 
+ * This file is part of the Nautilus AeroKernel developed
+ * by the Hobbes and V3VEE Projects with funding from the 
+ * United States National  Science Foundation and the Department of Energy.  
+ *
+ * The V3VEE Project is a joint project between Northwestern University
+ * and the University of New Mexico.  The Hobbes Project is a collaboration
+ * led by Sandia National Laboratories that includes several national 
+ * laboratories and universities. You can find out more at:
+ * http://www.v3vee.org  and
+ * http://xtack.sandia.gov/hobbes
+ *
+ * Copyright (c) 2016, Kyle C. Hale <khale@cs.iit.edu>
+ * Copyright (c) 2015, The V3VEE Project  <http://www.v3vee.org> 
+ *                     The Hobbes Project <http://xstack.sandia.gov/hobbes>
+ * All rights reserved.
+ *
+ * Author: Kyle C. Hale <khale@cs.iit.edu>
+ *
+ * This is free software.  You are permitted to use,
+ * redistribute, and modify it as specified in the file "LICENSE.txt".
+ */
+#ifndef __SETJMP_H__
+#define __SETJMP_H__
+
+
+/* this is making a 64-bit assumption */
+typedef uint64_t __jmp_buf[8];
+
+struct __jmp_buf_tag {
+	__jmp_buf __jmpbuf;
+	/* we don't care about signal masks */
+};
+
+typedef struct __jmp_buf_tag jmp_buf[1];
+
+
+int test_setlong(void);
+int setjmp(jmp_buf env);
+void longjmp(jmp_buf env, int val) __attribute__((noreturn));
+
+#endif
diff --git a/src/asm/Makefile b/src/asm/Makefile
index b84782b..e1483c0 100644
--- a/src/asm/Makefile
+++ b/src/asm/Makefile
@@ -1,7 +1,8 @@
 obj-y += smpboot.o \
 		 excp_early.o \
 		 thread_lowlevel.o \
-		timing_loops.o
+		 setjmp_low.o \
+		 timing_loops.o
 
 ifdef NAUT_CONFIG_PALACIOS_EMBED_VM_IMG
 	obj-y += guest.o
diff --git a/src/asm/setjmp_low.S b/src/asm/setjmp_low.S
new file mode 100644
index 0000000..4a11372
--- /dev/null
+++ b/src/asm/setjmp_low.S
@@ -0,0 +1,39 @@
+
+#include <asm/lowlevel.h>
+
+
+
+// rdi holds the jmp buf environment
+ENTRY(setjmp)
+	movq %rbx, (%rdi)     // save rbx
+	movq %rbp, 0x8(%rdi)  // save frame
+	movq %r12, 0x10(%rdi) // save r12
+	movq %r13, 0x18(%rdi) // save r13
+	movq %r14, 0x20(%rdi) // save r14
+	movq %r15, 0x28(%rdi) // save r15
+	leaq 8(%rsp), %rdx
+	movq %rdx, 0x30(%rdi) // save rsp above ret addr
+	movq (%rsp), %rdx     // ret addr -> rdx
+	movq %rdx, 0x38(%rdi) // save it
+	xorq %rax, %rax       // return 0
+	retq
+
+
+ENTRY(longjmp)
+	// should we return 1 or val?
+	xorq %rax, %rax
+	inc %rax
+	testq %rsi, %rsi      // if rsi is nonzero, we return val
+	cmovnzq %rsi, %rax
+
+	movq (%rdi), %rbx     // retsore rbx
+	movq 0x8(%rdi), %rbp  // restore frame ptr
+	movq 0x10(%rdi), %r12 // restore r12
+	movq 0x18(%rdi), %r13 // restore r13
+	movq 0x20(%rdi), %r14 // restore r14
+	movq 0x28(%rdi), %r15 // restore r15
+	movq 0x30(%rdi), %rdx // soon to be stack ptr
+	movq %rdx, %rsp
+	movq 0x38(%rdi), %rdx // soon to be rip
+	jmp  *%rdx
+
diff --git a/src/nautilus/Makefile b/src/nautilus/Makefile
index 99cb8ce..17f1775 100644
--- a/src/nautilus/Makefile
+++ b/src/nautilus/Makefile
@@ -32,8 +32,9 @@ obj-y += \
 	libccompat.o \
 	nemo.o \
 	pmc.o \
+	setjmp.o \
 	mm/ \
-        shell.o
+	shell.o
 
 obj-$(NAUT_CONFIG_PROFILE) += instrument.o
 obj-$(NAUT_CONFIG_XEON_PHI) += sfi.o
diff --git a/src/nautilus/setjmp.c b/src/nautilus/setjmp.c
new file mode 100644
index 0000000..7e83e3e
--- /dev/null
+++ b/src/nautilus/setjmp.c
@@ -0,0 +1,54 @@
+/* 
+ * This file is part of the Nautilus AeroKernel developed
+ * by the Hobbes and V3VEE Projects with funding from the 
+ * United States National  Science Foundation and the Department of Energy.  
+ *
+ * The V3VEE Project is a joint project between Northwestern University
+ * and the University of New Mexico.  The Hobbes Project is a collaboration
+ * led by Sandia National Laboratories that includes several national 
+ * laboratories and universities. You can find out more at:
+ * http://www.v3vee.org  and
+ * http://xtack.sandia.gov/hobbes
+ *
+ * Copyright (c) 2016, Kyle C. Hale <khale@cs.iit.edu>
+ * Copyright (c) 2015, The V3VEE Project  <http://www.v3vee.org> 
+ *                     The Hobbes Project <http://xstack.sandia.gov/hobbes>
+ * All rights reserved.
+ *
+ * Author: Kyle C. Hale <khale@cs.iit.edu>
+ *
+ * This is free software.  You are permitted to use,
+ * redistribute, and modify it as specified in the file "LICENSE.txt".
+ */
+#include <nautilus/nautilus.h>
+#include <nautilus/setjmp.h>
+
+static void
+testit (jmp_buf  env,
+        int      prev_res)
+{
+	int res = (!prev_res) ? prev_res : prev_res + 1;
+
+	printk("Long jumping with result %d\n", res);
+	longjmp(env, res);
+	panic("SHOULD NOT GET HERE!\n");
+}       
+
+
+int
+test_setlong (void)
+{
+  jmp_buf  env;
+
+  int res = setjmp(env);
+
+  printk("res = 0x%08x\n", res);
+
+  if (res > 1) {
+	  return  0;
+  }
+
+  testit(env, res);
+
+  return 0;
+}       
-- 
2.7.4

